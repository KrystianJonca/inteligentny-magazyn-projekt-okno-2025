/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register
     * @description Register a new user.
     */
    post: operations['register_auth_register_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login
     * @description Login a user and return a JWT token.
     */
    post: operations['login_auth_login_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/warehouses/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Warehouses
     * @description Get all warehouses from the database.
     */
    get: operations['get_warehouses_warehouses__get'];
    put?: never;
    /**
     * Create Warehouse
     * @description Create a new warehouse.
     */
    post: operations['create_warehouse_warehouses__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/warehouses/{warehouse_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Warehouse
     * @description Get a warehouse by ID.
     */
    get: operations['get_warehouse_warehouses__warehouse_id__get'];
    put?: never;
    post?: never;
    /**
     * Delete Warehouse
     * @description Delete a warehouse.
     */
    delete: operations['delete_warehouse_warehouses__warehouse_id__delete'];
    options?: never;
    head?: never;
    /**
     * Update Warehouse
     * @description Update a warehouse.
     */
    patch: operations['update_warehouse_warehouses__warehouse_id__patch'];
    trace?: never;
  };
  '/items/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Items
     * @description Get all items with pagination and total inventory information.
     *     Returns pagination metadata along with the results.
     *     Optionally filter items by name using the search parameter.
     */
    get: operations['get_items_items__get'];
    put?: never;
    /**
     * Create Item
     * @description Create a new item.
     */
    post: operations['create_item_items__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/items/{item_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Item
     * @description Get an item by ID with total inventory information.
     */
    get: operations['get_item_items__item_id__get'];
    put?: never;
    post?: never;
    /**
     * Delete Item
     * @description Delete an item.
     */
    delete: operations['delete_item_items__item_id__delete'];
    options?: never;
    head?: never;
    /**
     * Update Item
     * @description Update an item.
     */
    patch: operations['update_item_items__item_id__patch'];
    trace?: never;
  };
  '/inventory/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Inventory
     * @description Create a new inventory record.
     */
    post: operations['create_inventory_inventory__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/inventory/warehouse/{warehouse_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Inventory By Warehouse
     * @description Get all inventory records for a specific warehouse with item information.
     */
    get: operations['get_inventory_by_warehouse_inventory_warehouse__warehouse_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/inventory/item/{item_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Inventory By Item
     * @description Get all inventory records for a specific item with warehouse information.
     */
    get: operations['get_inventory_by_item_inventory_item__item_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/inventory/{warehouse_id}/{item_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Inventory By Warehouse And Item
     * @description Get a specific inventory record by warehouse_id and item_id with full details.
     */
    get: operations['get_inventory_by_warehouse_and_item_inventory__warehouse_id___item_id__get'];
    put?: never;
    post?: never;
    /**
     * Delete Inventory
     * @description Delete an inventory record.
     */
    delete: operations['delete_inventory_inventory__warehouse_id___item_id__delete'];
    options?: never;
    head?: never;
    /**
     * Update Inventory
     * @description Update an inventory record.
     */
    patch: operations['update_inventory_inventory__warehouse_id___item_id__patch'];
    trace?: never;
  };
  '/inventory/transfer': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Transfer Inventory
     * @description Transfer inventory from one warehouse to another.
     *
     *     This endpoint moves a specified quantity of an item from a source to a destination warehouse.
     *     If the source warehouse doesn't have enough quantity, the transfer will fail.
     *     If the item doesn't exist in the destination warehouse, a new inventory record will be created.
     */
    post: operations['transfer_inventory_inventory_transfer_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Root */
    get: operations['read_root__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Body_login_auth_login_post */
    Body_login_auth_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * InventoryCreate
     * @description Schema for creating a new inventory record.
     */
    InventoryCreate: {
      /** Warehouse Id */
      warehouse_id: number;
      /** Item Id */
      item_id: number;
      /** Quantity */
      quantity: number;
    };
    /**
     * InventoryRead
     * @description Schema for reading inventory data.
     */
    InventoryRead: {
      /** Warehouse Id */
      warehouse_id: number;
      /** Item Id */
      item_id: number;
      /** Quantity */
      quantity: number;
    };
    /**
     * InventoryTransfer
     * @description Schema for transferring inventory between warehouses.
     */
    InventoryTransfer: {
      /** Source Warehouse Id */
      source_warehouse_id: number;
      /** Destination Warehouse Id */
      destination_warehouse_id: number;
      /** Item Id */
      item_id: number;
      /** Quantity */
      quantity: number;
    };
    /**
     * InventoryTransferResponse
     * @description Response model for inventory transfer operations.
     */
    InventoryTransferResponse: {
      /** Message */
      message: string;
      source_inventory: components['schemas']['InventoryRead'];
      destination_inventory: components['schemas']['InventoryRead'];
    };
    /**
     * InventoryUpdate
     * @description Schema for updating an inventory record.
     */
    InventoryUpdate: {
      /** Quantity */
      quantity?: number | null;
    };
    /**
     * InventoryWithItem
     * @description Schema for reading inventory data with item information.
     */
    InventoryWithItem: {
      /** Warehouse Id */
      warehouse_id: number;
      /** Item Id */
      item_id: number;
      /** Quantity */
      quantity: number;
      item: components['schemas']['ItemRead'];
    };
    /**
     * InventoryWithWarehouse
     * @description Schema for reading inventory data with warehouse information.
     */
    InventoryWithWarehouse: {
      /** Warehouse Id */
      warehouse_id: number;
      /** Item Id */
      item_id: number;
      /** Quantity */
      quantity: number;
      warehouse: components['schemas']['WarehouseRead'];
    };
    /**
     * ItemCreate
     * @description Schema for creating a new item.
     */
    ItemCreate: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Sku */
      sku?: string | null;
    };
    /**
     * ItemRead
     * @description Schema for reading item data.
     */
    ItemRead: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Sku */
      sku?: string | null;
    };
    /**
     * ItemReadWithInventory
     * @description Schema for reading item data with total inventory information.
     */
    ItemReadWithInventory: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Sku */
      sku?: string | null;
      /** Item Id */
      item_id: number;
      /** Total Inventory */
      total_inventory: number;
    };
    /**
     * ItemUpdate
     * @description Schema for updating an item.
     */
    ItemUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Sku */
      sku?: string | null;
    };
    /**
     * PageInfo
     * @description Information about the current page.
     */
    PageInfo: {
      /** Total Items */
      total_items: number;
      /** Page */
      page: number;
      /** Page Size */
      page_size: number;
      /** Total Pages */
      total_pages: number;
      /** Has Next Page */
      has_next_page: boolean;
    };
    /**
     * PaginatedItemWithInventoryResponse
     * @description Paginated response for items with inventory information.
     */
    PaginatedItemWithInventoryResponse: {
      /** Items */
      items: components['schemas']['ItemReadWithInventory'][];
      page_info: components['schemas']['PageInfo'];
    };
    /**
     * Token
     * @description Model for JWT token.
     */
    Token: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /**
     * UserCreate
     * @description Model for creating a new user.
     */
    UserCreate: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /**
     * UserRead
     * @description Model for reading user data.
     */
    UserRead: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Username */
      username: string;
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * WarehouseCreate
     * @description Schema for creating a new warehouse.
     */
    WarehouseCreate: {
      /** Name */
      name: string;
      /** Square Footage */
      square_footage: number;
      /** Address */
      address: string;
      /** Manager Name */
      manager_name: string;
      /** Phone */
      phone: string;
      /** Latitude */
      latitude: number | string;
      /** Longitude */
      longitude: number | string;
    };
    /**
     * WarehouseRead
     * @description Schema for reading warehouse data.
     */
    WarehouseRead: {
      /** Name */
      name: string;
      /** Square Footage */
      square_footage: number;
      /** Address */
      address: string;
      /** Manager Name */
      manager_name: string;
      /** Phone */
      phone: string;
      /** Latitude */
      latitude: string;
      /** Longitude */
      longitude: string;
      /** Warehouse Id */
      warehouse_id: number;
    };
    /**
     * WarehouseUpdate
     * @description Schema for updating a warehouse.
     */
    WarehouseUpdate: {
      /** Name */
      name?: string | null;
      /** Square Footage */
      square_footage?: number | null;
      /** Address */
      address?: string | null;
      /** Manager Name */
      manager_name?: string | null;
      /** Phone */
      phone?: string | null;
      /** Latitude */
      latitude?: number | string | null;
      /** Longitude */
      longitude?: number | string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  register_auth_register_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  login_auth_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_login_auth_login_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Token'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_warehouses_warehouses__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WarehouseRead'][];
        };
      };
    };
  };
  create_warehouse_warehouses__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WarehouseCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WarehouseRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_warehouse_warehouses__warehouse_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WarehouseRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_warehouse_warehouses__warehouse_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_warehouse_warehouses__warehouse_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WarehouseUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WarehouseRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_items_items__get: {
    parameters: {
      query?: {
        /** @description Search items by name */
        search?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Number of items per page */
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedItemWithInventoryResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_item_items__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ItemCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ItemReadWithInventory'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_item_items__item_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ItemReadWithInventory'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_item_items__item_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_item_items__item_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ItemUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ItemReadWithInventory'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_inventory_inventory__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InventoryCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InventoryRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_inventory_by_warehouse_inventory_warehouse__warehouse_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InventoryWithItem'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_inventory_by_item_inventory_item__item_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InventoryWithWarehouse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_inventory_by_warehouse_and_item_inventory__warehouse_id___item_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InventoryRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_inventory_inventory__warehouse_id___item_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_inventory_inventory__warehouse_id___item_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        warehouse_id: number;
        item_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InventoryUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InventoryRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  transfer_inventory_inventory_transfer_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InventoryTransfer'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InventoryTransferResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
}
